---
- name: Import users from CSV
  hosts: linux
  become: yes
  vars:
    csv_source: /home/user/workfolder/users.csv
    csv_dest: /tmp/users.csv

  tasks:
    - name: Copy CSV file to remote host
      ansible.builtin.copy:
        src: "{{ csv_source }}"
        dest: "{{ csv_dest }}"
        mode: '0644'

    - name: Read users from CSV on remote host
      community.general.read_csv:
        path: "{{ csv_dest }}"
        delimiter: ";"
      register: users_csv

    - name: Ensure users exist without changing password if already present
      ansible.builtin.user:
        name: "{{ item.username }}"
        uid: "{{ item.uid | int }}"
        password: "{{ item.password | password_hash('sha512') }}"
        home: "{{ item.home }}"
        shell: /bin/bash
        state: present
        create_home: yes
        update_password: on_create
      loop: "{{ users_csv.list }}"
      loop_control:
        label: "{{ item.username }}"

# - name: Import users from CSV
#   hosts: linux
#   become: yes
#   vars:
#     csv_bastion: /home/user/workfolder/users.csv
#     csv_file: /tmp/users.csv

#   tasks:
#     - name: Copy CSV file to remote host
#       copy:
#         src: "{{ csv_bastion }}"
#         dest: "{{ csv_file }}"

#     - name: Read user CSV file
#       slurp:
#         src: "{{ csv_file }}"
#       register: csv_content

#     - name: Ensure users exist without changing password if already present
#       user:
#         name: "{{ item.username }}"
#         uid: "{{ item.uid | int }}"
#         password: "{{ item.password | password_hash('sha512') }}"
#         home: "{{ item.home }}"
#         shell: /bin/bash
#         state: present
#         create_home: yes
#         update_password: on_create
#       loop: "{{ users_csv.list }}"
#       loop_control:
#         label: "{{ item.username }}"

    # - name: Decode CSV and split lines
    #   set_fact:
    #     csv_lines: "{{ csv_content['content'] | b64decode | splitlines }}"

    # - name: Remove header from CSV lines
    #   set_fact:
    #     csv_lines: "{{ csv_content['content'] | b64decode | split('\n') }}"

    # - name: Convert raw CSV lines into structured dict
    #   set_fact:
    #     users_parsed: >-
    #       {{
    #         users_raw |
    #         map('split', ';') |
    #         map('zip', ['uid', 'username', 'password', 'home']) |
    #         map('community.general.dict') |
    #         list
    #       }}

    # - name: Generate password hashes
    #   set_fact:
    #     users_hashed: "{{ users_hashed | default([]) + [ item | combine({ 'password': (item.password | password_hash('sha512')) }) ] }}"
    #   loop: "{{ users_parsed }}"
    #   loop_control:
    #     label: "{{ item.username }}"
    
    # - name: Ensure users are present
    #   ansible.builtin.user:
    #     name: "{{ item.username }}"
    #     uid: "{{ item.uid | int }}"
    #     password: "{{ item.password }}"
    #     home: "{{ item.home }}"
    #     state: present
    #     update_password: on_create
    #     create_home: yes
    #   loop: "{{ users_hashed }}"